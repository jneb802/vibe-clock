{"version":3,"file":"node_modules_babylonjs_core_ShadersWGSL_lod_fragment_js.js","mappings":";;;;;;;;;;;;;;AAAA;AACwD;AACxD;AACA,qDAAqD,mBAAmB,mCAAmC,oCAAoC,iBAAiB,mBAAmB;AACnL,iDAAiD,+GAA+G,wBAAwB;AACxL;AACA;AACA,KAAK,gEAAW;AAChB,IAAI,gEAAW;AACf;AACA;AACO,6BAA6B;AACpC,wC","sources":["webpack://web-tide/./node_modules/@babylonjs/core/ShadersWGSL/lod.fragment.js"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nconst name = \"lodPixelShader\";\nconst shader = `const GammaEncodePowerApprox=1.0/2.2;varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;uniform lod: f32;uniform gamma: i32;@fragment\nfn main(input: FragmentInputs)->FragmentOutputs {fragmentOutputs.color=textureSampleLevel(textureSampler,textureSamplerSampler,fragmentInputs.vUV,uniforms.lod);if (uniforms.gamma==0) {fragmentOutputs.color=vec4f(pow(fragmentOutputs.color.rgb,vec3f(GammaEncodePowerApprox)),fragmentOutputs.color.a);}}\n`;\n// Sideeffect\nif (!ShaderStore.ShadersStoreWGSL[name]) {\n    ShaderStore.ShadersStoreWGSL[name] = shader;\n}\n/** @internal */\nexport const lodPixelShaderWGSL = { name, shader };\n//# sourceMappingURL=lod.fragment.js.map"],"names":[],"sourceRoot":""}