{"version":3,"file":"node_modules_babylonjs_core_Materials_Textures_Loaders_ddsTextureLoader_js.js","mappings":";;;;;;;;;;;;;;;AAA4E;AAC5B;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA,uBAAuB,kDAAQ;AAC/B;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kDAAQ;AAC3B;AACA;AACA;AACA,+CAA+C,8EAAmB;AAClE;AACA;AACA;AACA,YAAY,kDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAA8D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAQ;AAC7B;AACA;AACA,YAAY,kDAAQ;AACpB,SAAS;AACT;AACA;AACA,4C","sources":["webpack://web-tide/./node_modules/@babylonjs/core/Materials/Textures/Loaders/ddsTextureLoader.js"],"sourcesContent":["import { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial.js\";\nimport { DDSTools } from \"../../../Misc/dds.js\";\n/**\n * Implementation of the DDS Texture Loader.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _DDSTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = true;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param imgs contains the cube maps\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     */\n    loadCubeData(imgs, texture, createPolynomials, onLoad) {\n        const engine = texture.getEngine();\n        let info;\n        let loadMipmap = false;\n        let maxLevel = 1000;\n        if (Array.isArray(imgs)) {\n            for (let index = 0; index < imgs.length; index++) {\n                const data = imgs[index];\n                info = DDSTools.GetDDSInfo(data);\n                texture.width = info.width;\n                texture.height = info.height;\n                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n                engine._unpackFlipY(info.isCompressed);\n                DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\n                if (!info.isFourCC && info.mipmapCount === 1) {\n                    engine.generateMipMapsForCubemap(texture);\n                }\n                else {\n                    maxLevel = info.mipmapCount - 1;\n                }\n            }\n        }\n        else {\n            const data = imgs;\n            info = DDSTools.GetDDSInfo(data);\n            texture.width = info.width;\n            texture.height = info.height;\n            if (createPolynomials) {\n                info.sphericalPolynomial = new SphericalPolynomial();\n            }\n            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n            engine._unpackFlipY(info.isCompressed);\n            DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\n            if (!info.isFourCC && info.mipmapCount === 1) {\n                // Do not unbind as we still need to set the parameters.\n                engine.generateMipMapsForCubemap(texture, false);\n            }\n            else {\n                maxLevel = info.mipmapCount - 1;\n            }\n        }\n        engine._setCubeMapTextureParams(texture, loadMipmap, maxLevel);\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n        if (onLoad) {\n            onLoad({ isDDS: true, width: texture.width, info, data: imgs, texture });\n        }\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const info = DDSTools.GetDDSInfo(data);\n        const loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && Math.max(info.width, info.height) >> (info.mipmapCount - 1) === 1;\n        callback(info.width, info.height, loadMipmap, info.isFourCC, () => {\n            DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\n        });\n    }\n}\n//# sourceMappingURL=ddsTextureLoader.js.map"],"names":[],"sourceRoot":""}