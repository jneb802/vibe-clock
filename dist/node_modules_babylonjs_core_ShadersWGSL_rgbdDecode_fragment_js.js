"use strict";
(self["webpackChunkweb_tide"] = self["webpackChunkweb_tide"] || []).push([["node_modules_babylonjs_core_ShadersWGSL_rgbdDecode_fragment_js"],{

/***/ "./node_modules/@babylonjs/core/ShadersWGSL/rgbdDecode.fragment.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babylonjs/core/ShadersWGSL/rgbdDecode.fragment.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rgbdDecodePixelShaderWGSL: () => (/* binding */ rgbdDecodePixelShaderWGSL)
/* harmony export */ });
/* harmony import */ var _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Engines/shaderStore.js */ "./node_modules/@babylonjs/core/Engines/shaderStore.js");
/* harmony import */ var _ShadersInclude_helperFunctions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ShadersInclude/helperFunctions.js */ "./node_modules/@babylonjs/core/ShadersWGSL/ShadersInclude/helperFunctions.js");
// Do not edit.


const name = "rgbdDecodePixelShader";
const shader = `varying vUV: vec2f;var textureSamplerSampler: sampler;var textureSampler: texture_2d<f32>;
#include<helperFunctions>
#define CUSTOM_FRAGMENT_DEFINITIONS
@fragment
fn main(input: FragmentInputs)->FragmentOutputs {fragmentOutputs.color=vec4f(fromRGBD(textureSample(textureSampler,textureSamplerSampler,input.vUV)),1.0);}`;
// Sideeffect
if (!_Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStoreWGSL[name]) {
    _Engines_shaderStore_js__WEBPACK_IMPORTED_MODULE_0__.ShaderStore.ShadersStoreWGSL[name] = shader;
}
/** @internal */
const rgbdDecodePixelShaderWGSL = { name, shader };
//# sourceMappingURL=rgbdDecode.fragment.js.map

/***/ })

}]);
//# sourceMappingURL=node_modules_babylonjs_core_ShadersWGSL_rgbdDecode_fragment_js.js.map